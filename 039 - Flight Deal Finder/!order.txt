# 26/06/2024
# Day - 039 SOLUTION

*** Order ***
0. Follow main.py calls



email: titiritest@gmail.com
pw: pipiripython

Amadeus:
email: titiritest@gmail.com
pw: Pipiripython_1
API Key: xfsUXwzrT9z36aM48VsQEuCnvAFXMHrD
API Secret: vhmbkX0mA6d3apb1



###########################################################
Step 1 - Choose Your Path and Download the Starting Project
###########################################################

Download the starting project

Unzip the downloaded file and open the project in PyCharm.

Take a look through the starting project to get a sense for the 
structure of the final program.

Google Sheet --> Flight Search --> SMTP (email)/SMS

You can choose to build the project entirely yourself or you can 
follow step-by-step challenges. If you feel you are an advanced 
programmer and you have learnt and understood all the concepts 
in the course so far (OOP, APIs, datetime, List and Dictionary 
Comprehensions) then stop here and try to create the project 
yourself using the APIs listed below. If you prefer smaller 
step-by-step challenges then continue to the next lesson.



Make Your Own Copy of the Starting Google Sheet
Make a copy of the Google sheet.
https://docs.google.com/spreadsheets/d/1YMK-kYDYwuiGZoawQy7zyDjEIU9u8oggCV4H2M9j7os/edit?usp=sharing



APIs Required:

Google Sheet Data Management - 
https://sheety.co/

Amadeus Flight Search API (Free Signup, Credit Card not required) - 
https://developers.amadeus.com/

Amadeus Flight Offer Docs - 
https://developers.amadeus.com/self-service/category/flights/api-doc/flight-offers-search/api-reference

Amadeus How to work with API keys and tokens guide - 
https://developers.amadeus.com/get-started/get-started-with-self-service-apis-335

Amadeus Search for Airport Codes by City name - 
https://developers.amadeus.com/self-service/category/destination-experiences/api-doc/city-search/api-reference

Twilio Messaging (SMS or WhatsApp) API - 
https://www.twilio.com/docs/messaging/quickstart/python



Program Requirements:

1. Use the Flight Search and Sheety API to populate your own copy 
of the Google Sheet with International Air Transport Association (IATA) 
https://en.wikipedia.org/wiki/IATA_airport_code#Cities_with_multiple_airports
codes for each city. Most of the cities in the sheet include multiple 
airports, you want the city code (not the airport code see here).
https://en.wikipedia.org/wiki/IATA_airport_code#Cities_with_multiple_commercial_airports

2. Use the Flight Search API to check for the cheapest flights from 
tomorrow to 6 months later for all the cities in the Google Sheet.

3. If the price is lower than the lowest price listed in the Google Sheet 
then send an SMS (or WhatsApp Message) to your own number using the Twilio API.

4. The SMS should include the departure airport IATA code, destination airport 
IATA code, flight price and flight dates. e.g.
"Low price alert! Only 255.09€ to fly from LHR to CDG, on 2024-05-25 until 2024-11-20"



Notes and Gotchas:

Avoid hitting your rate limit on your trial accounts by not using too many 
destination airports in your google Sheet (use 5 or at most 10)

Also, the test Amadeus test API does not include all airports. 
You may not be able to retrieve prices for many routes flights. 
Try and stick to popular airports while practicing.



Toggle these options when setting up with Sheety

Sheety API
Avoid making too many unnecessary requests with the Sheety API while testing 
your code. The free tier for the Sheety API only allows 200 requests per month.
Also, enable the PUT option so that you can write to your Google sheet

Register with the Amadeus Flight Search API
Amadeus provides a free, rate limited test API.
Go ahead and register: https://developers.amadeus.com/register
There is no need to provide a credit card or billing information
A verification email will get sent to the email that you provided. 
Click the button to activate your account. 

Set up your Self Service App
Login to Amadeus. Then go to your self service workspace and create a new 
Self-Service App.
Create your new app. You can call it anything you want.
Make sure you get hold of your API keys! Copy and paste them someplace safe. 
You'll need these keys later to request an access token, so that you can 
search for flights.



##############################################################
Step 2 - Use Sheety to Read and Write Data to the Google Sheet
##############################################################

Read and Write Data to your Google Sheet
The goal for this step is to read and write some data to the Google Sheet. 
This way you can check if Sheety is working correctly before connecting to 
the Amadeus API and getting the actual IATA codes for each city to the Google 
Sheet.

1. Go to the link for the starting Google Sheet and make your own copy of it. 
Then create a new project on Sheety to work with your copy of the Google sheet.

Make requests using the Sheety API
2. Now use the Sheety API to GET all the data in that sheet and print it out. 
You should see something like this:

3. Try importing pretty print with the line from pprint import pprint and 
printing the data out again using pprint() to see it formatted.

4. Pass everything stored in the "prices" key back to the main.py file and 
store it in a variable called sheet_data, so that you can print the 
sheet_data from main.py

5. In main.py check if sheet_data contains any values for the "iataCode" key. 
If not, then the IATA Codes column is empty in the Google Sheet. In this case, 
pass each city name in sheet_data one-by-one to the FlightSearch class. For 
now, the FlightSearch class can respond with "TESTING" instead of a real IATA code. 
You should use the response from the FlightSearch class to update the sheet_data 
dictionary.
Print the updated sheet_data dictionary and you should see:

6. In the DataManager Class make a PUT request and use the row id from sheet_data 
to update the Google Sheet with the IATA codes. (Do this using code). 
HINT: Remember to check the checkbox to allow PUT requests in Sheety.
Take a look at the Sheety API documentation to help you:
If successful, you should see the Google Sheet update as if by magic 
(but it's not magic, it's just code):
IMPORTANT: The Google Sheet URL that you put into Sheety must be owned by the 
same account as the Google account you used to sign into Sheety.


Enable Authentication with Sheety and use Environment Variables
We've previously learned about how to use environment variables and how to use 
authentication. Let's bring those techniques into this capstone project. First, 
enable Basic Authentication for your sheety project.

Create a .env file that will hold all your secrets like your username, 
password, and token information.

You'll need to load the information in the .env file before you try to read 
from it. Install the python-dotenv package to help with this.

With the package installed you can call:

load_dotenv()
Here's how you would use the .env file:

https://stackoverflow.com/questions/40216311/reading-in-environment-variables-from-an-environment-file



#########################################
Step 3 - Get the IATA Codes using Amadeus
#########################################

Add the City IATA Codes to your Google Sheet:
In order to search for flights, we need an International 
Air Transport Association (IATA) code. This code helps to 
identify airports and metropolitan areas.
https://en.wikipedia.org/wiki/IATA_airport_code

Some airports are so famous that people even refer to the 
IATA code in normal conversation. e.g LAX and JFK.

Some cities have multiple airports so they have their own 
city IATA code which is different from the airport IATA 
code. e.g. LON (London) - LHR (Heathrow)/ LGW(Gatwick) etc.
https://en.wikipedia.org/wiki/IATA_airport_code#Cities_with_multiple_airports

The goal for this step is to add the missing IATA codes for 
each city to the Google Sheet.

1. Delete the "TESTING" values in the Google sheet again. 
Our code thus far only writes to the Google sheet if the cells 
are empty.



Add your Amadeus API Key and Secret to your .env file:
We've started storing our Sheety username and password in the 
.env file already. Let's add the Amadeus API key and Secret there 
as well.

NOTE: You'll have to sign up (free) for an account with Amadeus 
to access their flight search API. Double check the instructions in 
Step 1 to make sure you've selected the correct options.



Write a Constructor for the FlightSearch class:
For this project, let's do the Amadeus authentication inside our 
flight_search.py file. Create an __init__(self) in the FlightSearch class. 
Then give FlightSearch three variables: an _api_key, an _api_secret, 
and a _token.

Set your API key using your environment variables like this:
self._api_key = os.environ["AMADEUS_API_KEY"]

and set your token by calling a separate method where we'll request the token.
self._token = self._get_new_token()



Request a (bearer) Token from Amadeus
To make any requests to Amadeus, we first need a token (the Amadeus 
API key and Secret is not sufficient).

Create a function called _get_new_token(self) where you request a new token 
using your API keys.

Check out the official authorisation guide to find the endpoint for the token: 
https://developers.amadeus.com/self-service/apis-docs/guides/developer-guides/API-Keys/authorization/

I know the above link shows the endpoint but doesn't show you any Python 
example code. Here is what your Python code would roughly look like. Adapt 
this to your project:

# Header with content type as per Amadeus documentation
header = {
    'Content-Type': 'application/x-www-form-urlencoded'
}
body = {
    'grant_type': 'client_credentials',
    'client_id': YOUR_API_KEY,
    'client_secret': YOUR_API_SECRET
}
response = requests.post(url=TOKEN_ENDPOINT, headers=header, data=body)



City Search - Make requests using the Amadeus Travel API
Then take a look at the city search API -> search by city name.

1. Pass each city name in sheet_data one-by-one to the FlightSearch 
class to get the corresponding IATA code for that city using the 
Flight Search API. You should use the airport code you get back to 
update the sheet_data dictionary.

Print the updated sheet_data dictionary and you should see:

When you run your code again, you should see the Google Sheet update 
with the IATA code for each city.

Note: Add some Error Handling! The test API might not give you back
an airport code for certain cities. Also, if you hit the rate limit, 
it might not give you a response with airport data at all.



#################################
Step 4 - Search for Cheap Flights
#################################

Searching for Flights
The next step is to search for the flight prices from London (LON) to 
all the destinations in the Google Sheet. In this project, we're looking 
only for non stop flights, that leave anytime between tomorrow and in 6 months 
(6x30days) time. We're also looking for round trips for 1 adult. The currency 
of the price we get back should be in GBP.


Objective
Take a look at the Flight Offers Search API to see which parameters you can 
pass to the API:
https://developers.amadeus.com/self-service/category/flights/api-doc/flight-offers-search/api-reference

Aim to print the City and Price for all the cities, e.g:
If there is not flight or your API call doesn't return any data, 
then you should print "N/A".

The difficult bit:
Your API call will return a big JSON with many different flights. 
You'll have to parse this JSON to extract the cheapest flight. 
Use a tool like https://jsonpathfinder.com/ to locate the data that 
you need.

HINT 1: Use the FlightData class to represent the flight data. e.g. 
You can create attributes for price, departure_airport_code etc. Create a 
function called find_cheapest_flight() that parses the JSON data returned 
from your FlightSearch. Add some error handling e.g., if that data is None.

HINT 2: You can use timedelta() from the datatime module to define a 6 
month period (6 x 30 days). e.g.
https://stackoverflow.com/questions/4541629/how-to-create-a-datetime-equal-to-15-minutes-ago/4541668

HINT 3: You can use strftime() to format the date to the required format 
by the Flight Offers API.
https://www.w3schools.com/python/python_datetime.asp

HINT 4: You can use the split() function to get the first part of the date 
from the API response.
https://www.w3schools.com/python/ref_string_split.asp

Debugging 🐞 Note
You can of course change your starting city, time frame and the destination 
cities as you see fit. Keep this in mind when you run into problems. 
For example, due to international travel disruptions, there may actually be 
no flights to certain destinations in the timeframe that you're searching in. 
Thus your code may not work even if otherwise, it is perfectly valid. 
If you're not sure why you're not getting any results back, you can 
double-check flight availability on websites such as Skyscanner or Kayak.com. 
As such, you could change the origin city to Denver (DEN), change the 
currency to dollars (i.e., "curr"="USD"), and change the Google Sheet 
cities to very large domestic airports like Atlanta, Los Angeles, Chicago 
and Dallas.

Exception Handling if there are no flights
For some destinations, certain time periods, there will be no flights 
available. We need to add exception handling to our code so that it doesn't 
break and crash in these situations.

HINT: Consider creating a FlightData object with N/A values if your API 
call is to Amadeus had problems.

FlightData(
  price="N/A",
  origin_airport="N/A", 
  destination_airport="N/A", 
  out_date="N/A",
  return_date="N/A"
)



################################################################
Step 5 - If the price is lower than in the Sheet, send a message
################################################################

Send a Message using Twilio
The final step is to check if any of the flights found are cheaper 
than the Lowest Price listed in the Google Sheet. If so, then we 
should use the Twilio API to send an SMS with enough information to 
book the flight. You should use the NotificationManager for this job.

The message should include:

- Price
- Departure Airport IATA Code
- Arrival Airport IATA Code
- Outbound Date
- Inbound Date

You can send an SMS
Or a WhatsApp message

Add your Twilio secrets to the .env file
Don't forget to add your Twilio ID, Auth Token, Virtual number, 
and verified numbers to your .env file.