# 23/07/2024
# Day - 047



##############################################################
Step 1 - Updated Use BeautifulSoup to scrape the product price
##############################################################

Use BeautifulSoup on the Practice Page

Live websites change A LOT. Let's get the first version of our project 
working on a clone of Amazon's page before we move onto the real thing. 
Take a look at: 

https://appbrewery.github.io/instant_pot/

1.  Use BeautifulSoup to get hold of the price of the item as a floating 
point number and print it out. This is what you're after: 99.99

HINT: You might need to use the split() method: 
https://www.w3schools.com/python/ref_string_split.asp



#########################################################
Step 2 - Email alert when the price is below preset value
#########################################################

Send an email if the price is below your target

We want to get an email when the price of our product is below a certain value. 
e.g in the case of the Instant Pot, we'll set the target price as $100.

When the price is below 100 then use the smtp module to send an email to yourself. 
In the email, include the title of the product, the current price and a link to 
buy the product.

This is what you're aiming for:
Instant Pot Duo Evo Plus 9-in-1 Electric Pressure Cooker... is now $99.99
LINK: https://www.amazon.com/Instant-Pot-Plus-Programmable-Sterilizer/dp/B075CYMYK6


Hide your email and password in a .env file

We've already covered environment variables in Day 35 and Day 38.
It's good practice to hide sensitive information like passwords, email addresses and API keys. 
A good way to hide your information is by keeping it separate from the source code 
in your .py files.

1. Create a .env file.
2. Your .env file should consist of key value pairs where you store your personal information. 
It should look something like this:

SMTP_ADDRESS="smtp.gmail.com"
EMAIL_ADDRESS="angela@email.com"
EMAIL_PASSWORD="Use_an_App_Password_from_your_email_provider"

3. In your main.py file use the os and dotenv modules to remove your personal 
information from the .py file.

The dotenv documentation shows how to go about it: 
https://pypi.org/project/python-dotenv/


SMTP Server Disconnected Error?

1. Make sure you've got the correct smtp address for your email provider:

Gmail: smtp.gmail.com
Hotmail: smtp.live.com
Outlook: outlook.office365.com
Yahoo: smtp.mail.yahoo.com

If you use another email provider, just Google for your email provider 
e.g. "Gmail SMTP address"

Below are steps specific to users sending email from Gmail and Yahoo addresses
as outlined in the Birthday Wisher on Day 32.

2. Turn on 2-Step Verification for your email under the Security settings for 
your account. For example, Manage Your Google Account -> Security.

3. Add an App Password under your email settings. Select "Other" from the 
drop-down settings and choose a password. Use this app password in your Python code.

4. Add a port number by changing your code to this:
smtplib.SMTP("smtp.gmail.com", port=587)



####################################
Step 3 - Add headers to your request
####################################

What is a Header?

When making a request to Amazon or any website, your browser will send some 
additional data along with the request. Typically this will be information 
regarding what browser you are using, what computer you have, and what your 
preferred language is. This information is included in the headers. By using 
the headers, Amazon's server can respond with the right website for your 
region and your language.

1. See the headers that your own browser is sending by going to this website:
http://myhttpheader.com/

Try different browsers (e.g., Chrome, Brave, Firefox, Safari) and see how the 
headers change. 

There you can see my language settings and that I used a Mac computer to 
make the request.

Add the headers to your code: Why would you want to do this?

If you pass some headers along then Amazon's servers can give you the instant 
pot page in your language and also in your currency.

Also, it will make your request look (slightly) more human and less like a bot. 
Why? Headers include data that is sent over by a browser rather than a script. 
And many web servers like Amazon's may block requests they think originate 
from bots.

At the moment we are making a request without adding any headers:
response = requests.get("https://www.udemy.com/")

Here's how you can pass some headers alongside your requests: 
response = requests.get("https://www.udemy.com/", headers={"Accept-Language":"en-US"})

Here is more detailed information on how you pass headers with the requests library:
https://stackoverflow.com/questions/6260457/using-headers-with-the-python-requests-librarys-get-method

2. Add some headers to your request in the main.py. At minimum add the User-Agent and Accept-Language. 
At most copy the full header from 
https://httpbin.org/headers (excluding the host and X-Amzn-Trace-id)



####################################
Step 4 - Scrape the live Amazon site
####################################

Tackle the live Amazon site

You've tackled that static site. Now we can try our luck with the live Amazon site. 
The thing is - live site's change! If Amazon changes the html then the price information 
may move to a different part of the page. Also, Amazon might respond to our request 
with a Captcha instead of the web page.

1. Find a product on Amazon that you want to track and get the product URL or just 
use the one I'm tracking.

https://www.amazon.com/dp/B075CYMYK6?psc=1&ref_=cm_sw_r_cp_ud_ct_FM9M699VKHTT47YD50Q6

2. Inspect the price and the product title and check if you need to change 
soup.find() to get the correct values.

3. Change the url from the static practice site to the Amazon product page you want 
to target.

4. Run your code! Use print(soup.prettify()) to see what you're getting back from Amazon. 
Amazon might just return something unfriendly like Captcha page.

Good luck! If your code runs successfully on the live site, you should see something like this:


Troubleshooting
If you're not getting what you're expecting, try the following:

1. Choose a different amazon region or page for your url. For example, 
if you're based in the UK, use a product from amazon.co.uk rather than amazon.com.

2. Change the values that you're providing in the headers with your request. 
Try providing a minimal headers. Try providing a lot of data via your headers. 
Do you get the same result?

3. Try is using a different parser with BeautifulSoup. So far, we've been using 
the "html.parser", but you can also try "lxml" to make soup with the web page 
HTML you get back. You would use a different parser like this:

soup = BeautifulSoup(response.content, "html.parser")
soup = BeautifulSoup(response.content, "lxml")

If you get an error that says "bs4.FeatureNotFound: Couldn't find a tree builder 
with the features you requested: html-parser." Then it means you're not using the 
right parser, you'll need to import lxml at the top and install the module then 
use "lxml" instead of "html.parser" when you make soup.