# 27/06/2024
# Day - 040 SOLUTION

*** Order ***
0. .py
1. .py
2. auditorium
3. PJ.py



####################################################
Step 1 - Create a Sharable Form linked to your Sheet
####################################################

We'll need our customer's names and emails in order to email them the flight deals. 
We've already got a Google Sheet set up, so the easiest way to have our future 
customers provide their emails is to send the a form, so that they can add their 
email to our Google sheet. Our Python program will then read from that sheet (as 
it did before), but now it will be able to email those customers who put their 
email down!



Configure a Google Form write to your existing Sheet
1. Inside Google Drive, right click and create a new google form.
https://drive.google.com/drive/home

2. Make sure email collection is disabled and you do not limit to 1 
response (this makes testing and entering some dummy data easier).

3. Add 3 questions to collect their first name, last name, and email.

4. ‼️ Link your google form to your existing Flight Deals Sheet ‼️

5. Rename your responses sheet to "users"

6. Try out your form. Submit some dummy data and see if it shows up in 
your sheet. Click Send and copy the link.

Paste the link into a private or incognito window in your browser. 
And submit some responses.

You should see your data show up in your spreadsheet now.



Configure Sheety for User Data
1. Sync the new sheet in Sheety. Your "users" sheet should appear below "prices".
Note: you might have to log in again to Sheety.

2. Check that PUT and POST requests are enabled for your users tab. 
Enable POST requests for the users endpoint.

3. Enable the POST method in the users endpoint:
Why are we using a google form instead of writing the Python terminal program 
that you saw in the previous video? Sadly, replit has disabled sharing of 
terminal style programs. A google form has become the best substitute for now.



######################################
Step 2 - Download the Starting Project
######################################

Download the completed code for the flight deals project that we created 
yesterday from this lesson's course resources. Unzip the file and open the 
project in PyCharm.

Remember to replace the secrets, API keys, Sheety endpoints and phone numbers 
with your own.

Alternatively, you can use your own code from yesterday, make sure that it has 
all of the required functionality. If in doubt, review the code from 
yesterday's completed project.



############################################
Step 3 - Destinations without Direct Flights
############################################

There are a lot of popular destinations that our customers will want to go 
to that don't have direct flights. e.g. London to Bali would have to be via, 
say, Singapore.



Requirements:
If a direct flight is not found, search Amadeus one more time for that destination 
to see if there are indirect flights (flights with 1 stop or 2 stops) instead. 
Capture the cheapest flight price for a flight with a stopover.



Technical Specification:
You'll need to modify the main.py, flight_search.py and the flight_data.py files 
so that you:

* Search for indirect flights only if there are no direct flights.
* Modify the check_flights() function so that it has a parameter called is_direct 
  that has a default value of True:
  def check_flights(self, origin_city_code, destination_city_code, from_time, to_time, is_direct=True):
* Look at the flight_search.py. The Amadeus API has a query parameter called 
  "nonStop". Set this to the string "true" and "false" depending on your needs.
* In the flight_data.py, add a variable called stops to your __init__() method 
  to capture how many stops a flight has.
* Update the destination so that you get the airport code from the final destination, 
  not just from the stopover. Hint: In Amadeus an itinerary with a single segment 
  is a direct flight. If there is more than 1 segment then the flight has stopovers.



######################################
Step 4 - Retrieve your customer emails
######################################

Your customers are submitting their data to your google sheet.

1. Make a note of the column name that contains the email addresses. 
The name comes from what you used in the Google form.

Objective
Retrieve the emails from your google sheet as a Python list inside your main.py


Technical requirements
You should make changes to your data_manager.py, your main.py and your .env file.
* Add your endpoints for your "prices" and your "users" sheets to your .env file.
* Add a method called get_customer_emails() to your data_manager.py. This should 
return the data on your "users" spreadsheet.
* Update the __init()__ method so that you retrieve all the environment variables 
in one place. This should include things like your SHEETY_USERNAME , your password, 
but also your endpoints.


In the next step we'll send out emails to all our customers that we've retrieved 
from the Google sheet!



################################
Step 5 - Email all our customers
################################

Now that our program is working as expected, all that's left to do is to notify 
our customers when there is a good deal!

For this step you'll need to use what you have learnt about smtplib and sending 
emails (we covered this in day 32). This is the final part of the project!

Objective
Send all our customers in the "users" sheet from Google Sheets an email that 
contains the flight deal.

Technical requirements:
1. Update your .env file with your SMTP address, your email, and your app password.
2. In the notification_manager.py, update your __init__() method so that you 
retrieve all the environment variables in one place.
3. Create a method in the NotificationManager called send_emails() .
NOTE: when sending emails, it won't like the "£" symbol, you might get an error 
like the one below:
Use "GBP" instead of the "£" symbol. You can also solve this by encoding the 
message with UTF-8 e.g. 
https://stackoverflow.com/questions/9942594/unicodeencodeerror-ascii-codec-cant-encode-character-u-xa0-in-position-20#answer-9942885
4. In your main.py, craft a different message depending on whether the flight is 
direct or has a stopover.